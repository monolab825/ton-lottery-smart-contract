;;
;; Header files for LotteryPool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $TokenPayout$_load
(slice, ((int))) $TokenPayout$_load(slice sc_0) inline;

;; $TokenPayoutResponse$_store
builder $TokenPayoutResponse$_store(builder build_0, (slice) v) inline;

;; $TokenPayoutResponse$_store_cell
cell $TokenPayoutResponse$_store_cell((slice) v) inline;

;; $TokenPayoutResponse$_load
(slice, ((slice))) $TokenPayoutResponse$_load(slice sc_0) inline;

;; $TokenPayoutResponse$_as_optional
tuple $TokenPayoutResponse$_as_optional((slice) v) inline;

;; $TokenPayoutResponse$_load_opt
tuple $TokenPayoutResponse$_load_opt(cell cl) inline;

;; $Winner$_store
builder $Winner$_store(builder build_0, (int, int, slice) v) inline;

;; $Winner$_load
(slice, ((int, int, slice))) $Winner$_load(slice sc_0) inline;

;; $LotteryPool$_store
builder $LotteryPool$_store(builder build_0, ((int, int, slice), slice, int, int, cell, cell, cell, int, int) v) inline;

;; $LotteryPool$_load
(slice, (((int, int, slice), slice, int, int, cell, cell, cell, int, int))) $LotteryPool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $TokenPayoutResponse$_not_null
((slice)) $TokenPayoutResponse$_not_null(tuple v) inline;

;; $Winner$_to_external
(int, int, slice) $Winner$_to_external(((int, int, slice)) v) inline;

;; $Winner$_constructor_value_token_address
((int, int, slice)) $Winner$_constructor_value_token_address(int value, int token, slice address) inline;

;; $LotteryPool$_contract_init
((int, int, slice), slice, int, int, cell, cell, cell, int, int) $LotteryPool$_contract_init() impure inline_ref;

;; $LotteryPool$_contract_load
((int, int, slice), slice, int, int, cell, cell, cell, int, int) $LotteryPool$_contract_load() impure inline_ref;

;; $LotteryPool$_contract_store
() $LotteryPool$_contract_store(((int, int, slice), slice, int, int, cell, cell, cell, int, int) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $LotteryPool$_fun_clear
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), ()) $LotteryPool$_fun_clear(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self) impure inline_ref;

;; $LotteryPool$_fun_totalBalance
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), int) $LotteryPool$_fun_totalBalance(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self) impure inline_ref;

;; $LotteryPool$_fun_totalTokens
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), int) $LotteryPool$_fun_totalTokens(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self) impure inline_ref;

;; $LotteryPool$_fun_getUserTokens
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), cell) $LotteryPool$_fun_getUserTokens(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self) impure inline_ref;

;; $LotteryPool$_fun_getLastwinner
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), (int, int, slice)) $LotteryPool$_fun_getLastwinner(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $LotteryPool$_fun_forward
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), ()) $LotteryPool$_fun_forward(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $LotteryPool$_fun_notify
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), ()) $LotteryPool$_fun_notify(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self, cell $body) impure inline;

;; $LotteryPool$_fun_owner
(((int, int, slice), slice, int, int, cell, cell, cell, int, int), slice) $LotteryPool$_fun_owner(((int, int, slice), slice, int, int, cell, cell, cell, int, int) $self) impure inline_ref;

;; $TokenPayoutResponse$_constructor_token
((slice)) $TokenPayoutResponse$_constructor_token(slice token) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
